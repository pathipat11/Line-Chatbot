import re
from flask import Flask, request
from linebot import LineBotApi, WebhookHandler
from linebot.exceptions import InvalidSignatureError
from linebot.models import ( MessageEvent, TextMessage, TextSendMessage, QuickReply, QuickReplyButton, MessageAction, FlexSendMessage, ImageSendMessage )
import requests

LINE_CHANNEL_ACCESS_TOKEN = "Ea4Fo1WAIUnKbPl18U7ZG9UM5P98DSt0F74h4yAxjid9GclP1rl1rAnZ7Hh+Nbq2zPifb+HOKhscyVo4YVYUKr3D09ycpcq16UUxvAp+4E0Twwj+JTBUNe8dE8kEjDYy6J1bS5Z9JW64xQyQvkMrCAdB04t89/1O/w1cDnyilFU="
LINE_CHANNEL_SECRET = "38ef76e8fd8dc498b03c3e1484e8eefe"

line_bot_api = LineBotApi(LINE_CHANNEL_ACCESS_TOKEN)
handler = WebhookHandler(LINE_CHANNEL_SECRET)

PREDICTION_API_URL = "https://bot-restful-api.onrender.com/predict"

user_sessions = {}

app = Flask(__name__)

@app.route("/", methods=["GET"])
def home():
    return "Line Chatbot for Employee Status Prediction is Running."

@app.route("/callback", methods=["POST"])
def callback():
    signature = request.headers["X-Line-Signature"]
    body = request.get_data(as_text=True)

    try:
        handler.handle(body, signature)
    except InvalidSignatureError:
        return "Invalid signature", 400

    return "OK"

@handler.add(MessageEvent, message=TextMessage)
def handle_message(event):
    user_id = event.source.user_id
    user_input = event.message.text.strip()

    if user_input.lower() in ["help", "‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠", "‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ", "‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°"]:
        reply_text = (
            "üîπ ‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ‡∏£‡∏∞‡∏ö‡∏ö‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏ú‡∏•\n"
            "1Ô∏è‚É£ ‡∏û‡∏¥‡∏°‡∏û‡πå 'Prediction' ‡∏´‡∏£‡∏∑‡∏≠ '‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô\n"
            "2Ô∏è‚É£ ‡∏Å‡∏£‡∏≠‡∏Å‡∏Ñ‡πà‡∏≤‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏ñ‡∏≤‡∏°\n"
            "3Ô∏è‚É£ ‡∏Å‡∏î '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•' ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏£‡∏≠‡∏Å‡∏Ñ‡∏£‡∏ö\n"
            "üî∏ ‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà ‡πÉ‡∏´‡πâ‡∏û‡∏¥‡∏°‡∏û‡πå '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å'"
        )
        line_bot_api.reply_message(event.reply_token, TextSendMessage(text=reply_text))
        return

    if user_input.lower() in ["prediction", "‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå", "‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢"]:
        user_sessions[user_id] = {"step": 1, "data": {}}
        reply_text = "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ñ‡πà‡∏≤ Age (‡∏≠‡∏≤‡∏¢‡∏∏) ‡πÄ‡∏ä‡πà‡∏ô 30"
        line_bot_api.reply_message(event.reply_token, TextSendMessage(text=reply_text))
        return

    if user_input == "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å":
        user_sessions.pop(user_id, None)
        line_bot_api.reply_message(event.reply_token, TextSendMessage(text="‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ñ‡∏π‡∏Å‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà"))
        return

    if user_input == "‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•":
        user_data = user_sessions.get(user_id, {}).get("data")
        
        if not user_data:
            line_bot_api.reply_message(event.reply_token, TextSendMessage(text="‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà"))
            return

        try:
            response = requests.post(PREDICTION_API_URL, json=user_data)
            if response.status_code == 200:
                result = response.json()
                reply_text = f"‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå: {result.get('prediction', '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡πÑ‡∏î‡πâ')}"
            else:
                reply_text = f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏à‡∏≤‡∏Å‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå (Status Code: {response.status_code})"
        except requests.exceptions.RequestException as e:
            reply_text = f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ API ‡πÑ‡∏î‡πâ: {str(e)}"

        user_sessions.pop(user_id, None)
        line_bot_api.reply_message(event.reply_token, TextSendMessage(text=reply_text))
        return

    if user_id in user_sessions:
        session = user_sessions[user_id]
        step = session["step"]

        try:
            if step == 1:
                session["data"]["age"] = int(user_input)
                reply_text = "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ñ‡πà‡∏≤ Length of Service (‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô) ‡πÄ‡∏ä‡πà‡∏ô 5"
            elif step == 2:
                session["data"]["length_of_service"] = int(user_input)
                reply_text = "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ñ‡πà‡∏≤ Salary (‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô) ‡πÄ‡∏ä‡πà‡∏ô 30000"
            elif step == 3:
                session["data"]["salary"] = float(user_input)
                reply_text = "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ñ‡πà‡∏≤ Gender (‡πÄ‡∏û‡∏®) ‡πÄ‡∏ä‡πà‡∏ô 0 (‡∏ä‡∏≤‡∏¢) ‡∏´‡∏£‡∏∑‡∏≠ 1 (‡∏´‡∏ç‡∏¥‡∏á)"
            elif step == 4:
                gender = int(user_input)
                if gender not in [0, 1]:
                    raise ValueError
                session["data"]["gender"] = gender
                reply_text = "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ñ‡πà‡∏≤ Marital Status (‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏™‡∏°‡∏£‡∏™) ‡πÄ‡∏ä‡πà‡∏ô 0 (‡πÇ‡∏™‡∏î) ‡∏´‡∏£‡∏∑‡∏≠ 1 (‡πÅ‡∏ï‡πà‡∏á‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß)"
            elif step == 5:
                marital_status = int(user_input)
                if marital_status not in [0, 1]:
                    raise ValueError
                session["data"]["marital_status"] = marital_status

                summary_flex = create_summary_flex(session["data"])
                line_bot_api.reply_message(event.reply_token, summary_flex)
                return

            session["step"] += 1

        except ValueError:
            reply_text = "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ñ‡πà‡∏≤‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á"
        
        line_bot_api.reply_message(event.reply_token, TextSendMessage(text=reply_text))
        return

def create_summary_flex(user_data):
    flex_message = {
        "type": "bubble",
        "size": "mega",
        "body": {
            "type": "box",
            "layout": "vertical",
            "contents": [
                {"type": "text", "text": "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì", "weight": "bold", "size": "xl", "align": "center"},
                {"type": "separator", "margin": "sm"},
                {"type": "text", "text": f"‡∏≠‡∏≤‡∏¢‡∏∏: {user_data['age']} ‡∏õ‡∏µ", "size": "md"},
                {"type": "text", "text": f"‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô: {user_data['length_of_service']} ‡∏õ‡∏µ", "size": "md"},
                {"type": "text", "text": f"‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô: {user_data['salary']} ‡∏ö‡∏≤‡∏ó", "size": "md"},
                {"type": "text", "text": f"‡πÄ‡∏û‡∏®: {'‡∏ä‡∏≤‡∏¢' if user_data['gender'] == 0 else '‡∏´‡∏ç‡∏¥‡∏á'}", "size": "md"},
                {"type": "text", "text": f"‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏™‡∏°‡∏£‡∏™: {'‡πÇ‡∏™‡∏î' if user_data['marital_status'] == 0 else '‡πÅ‡∏ï‡πà‡∏á‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß'}", "size": "md"},
                {"type": "separator", "margin": "sm"},
                {"type": "text", "text": "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?", "size": "md", "align": "center", "weight": "bold"}
            ]
        },
        "footer": {
            "type": "box",
            "layout": "vertical",
            "contents": [
                {"type": "button", "style": "primary", "action": {"type": "message", "label": "‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•", "text": "‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"}},
                {"type": "button", "style": "secondary", "action": {"type": "message", "label": "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å", "text": "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å"}}
            ]
        }
    }
    return FlexSendMessage(alt_text="‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì", contents=flex_message)

if __name__ == "__main__":
    app.run(debug=True)